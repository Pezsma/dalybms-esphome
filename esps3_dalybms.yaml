esphome:
  name: esps3
  friendly_name: esps3

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

logger:
  level: DEBUG

api:

ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esps3 Daly BMS"
    password: "mukucs123456"

web_server:
  local: true
  include_internal: false
  port: 80

uart:
  id: uart_1
  baud_rate: 9600
  tx_pin: 7
  rx_pin: 6
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      timeout: 100ms
    sequence:
      - lambda: |-
          UARTDebug::log_hex(direction, bytes, ' ');

modbus:
  id: modbus_client
  uart_id: uart_1

modbus_controller:
  - id: modbus_device
    address: 0xD2
    modbus_id: modbus_client
    update_interval: 10s

sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 1"
    register_type: holding
    address: 0x00
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 2"
    register_type: holding
    address: 0x01
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 3"
    register_type: holding
    address: 0x02
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 4"
    register_type: holding
    address: 0x03
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 5"
    register_type: holding
    address: 0x04
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 6"
    register_type: holding
    address: 0x05
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 7"
    register_type: holding
    address: 0x06
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Cell 8"
    register_type: holding
    address: 0x07
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 3
    lambda: "return .001 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature 1"
    register_type: holding
    address: 0x20
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 0
    lambda: "return (float)x - 40;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature 2"
    register_type: holding
    address: 0x21
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 0
    lambda: "return (float)x - 40;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature 3"
    register_type: holding
    address: 0x22
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 0
    lambda: "return (float)x - 40;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Temperature 4"
    register_type: holding
    address: 0x23
    unit_of_measurement: "°C"
    value_type: U_WORD
    accuracy_decimals: 0
    lambda: "return (float)x - 40;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "BMS Voltage"
    register_type: holding
    address: 0x28
    unit_of_measurement: "V"
    value_type: U_WORD
    accuracy_decimals: 1
    lambda: "return .1 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "BMS Current"
    register_type: holding
    address: 0x29
    unit_of_measurement: "A"
    value_type: U_WORD
    accuracy_decimals: 1
    lambda: |-
      int32_t reg = (int32_t)x;
      float current = 0.1f * (reg - 30000);   // discharge = pozitív, charge = negatív
      return current;

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Charge"
    register_type: holding
    address: 0x2a
    unit_of_measurement: "%"
    value_type: U_WORD
    accuracy_decimals: 1
    lambda: "return 0.1 * (float)x;"

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Fault Status 1 Raw"
    register_type: holding
    address: 0x3a
    value_type: U_WORD
    accuracy_decimals: 0
    id: fault_status_1

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Fault Status 2 Raw"
    register_type: holding
    address: 0x3b
    value_type: U_WORD
    accuracy_decimals: 0
    id: fault_status_2

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Fault Status 3 Raw"
    register_type: holding
    address: 0x3c
    value_type: U_WORD
    accuracy_decimals: 0
    id: fault_status_3

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Charge/Discharge Status"
    register_type: holding
    address: 0x2f
    lambda: |-
      // x is a string here (modbus text), compare as string
      if (x == "0") return std::string("Idle");
      else if (x == "1") return std::string("Charging");
      else if (x == "2") return std::string("Discharging");
      else return std::string("Unknown");

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Balance State"
    register_type: holding
    address: 0x34
    lambda: |-
      if (x == "1") return std::string("Active");
      else if (x == "0") return std::string("Inactive");
      else return std::string("Unknown");

  - platform: modbus_controller
    modbus_controller_id: modbus_device
    name: "Battery Type"
    register_type: holding
    address: 0x89
    lambda: |-
      if (x == "0") return std::string("LiFePO4");
      else if (x == "1") return std::string("Ternary");
      else if (x == "2") return std::string("Lithium Titanate");
      else return std::string("Unknown");

binary_sensor:
  - platform: template
    name: "Alarm L1 - Cell Voltage High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0001) != 0;

  - platform: template
    name: "Alarm L2 - Cell Voltage High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0002) != 0;

  - platform: template
    name: "Alarm L1 - Cell Voltage Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0004) != 0;

  - platform: template
    name: "Alarm L2 - Cell Voltage Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0008) != 0;

  - platform: template
    name: "Alarm L1 - Total Voltage High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0010) != 0;

  - platform: template
    name: "Alarm L2 - Total Voltage High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0020) != 0;

  - platform: template
    name: "Alarm L1 - Total Voltage Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0040) != 0;

  - platform: template
    name: "Alarm L2 - Total Voltage Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0080) != 0;

  - platform: template
    name: "Alarm L1 - Charging Temp High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0100) != 0;

  - platform: template
    name: "Alarm L2 - Charging Temp High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0200) != 0;

  - platform: template
    name: "Alarm L1 - Charging Temp Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0400) != 0;

  - platform: template
    name: "Alarm L2 - Charging Temp Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x0800) != 0;

  - platform: template
    name: "Alarm L1 - Discharging Temp High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x1000) != 0;

  - platform: template
    name: "Alarm L2 - Discharging Temp High"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x2000) != 0;

  - platform: template
    name: "Alarm L1 - Discharging Temp Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x4000) != 0;

  - platform: template
    name: "Alarm L2 - Discharging Temp Low"
    lambda: |-
      if (isnan(id(fault_status_1).state)) return false;
      if ((uint16_t)id(fault_status_1).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_1).state & 0x8000) != 0;

  - platform: template
    name: "Alarm L1 - Charging Current High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0001) != 0;

  - platform: template
    name: "Alarm L2 - Charging Current High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0002) != 0;

  - platform: template
    name: "Alarm L1 - Discharging Current Low"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0004) != 0;

  - platform: template
    name: "Alarm L2 - Discharging Current Low"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0008) != 0;

  - platform: template
    name: "Alarm L1 - SOC Too High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0010) != 0;

  - platform: template
    name: "Alarm L2 - SOC Too High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0020) != 0;

  - platform: template
    name: "Alarm L1 - SOC Too Low"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0040) != 0;

  - platform: template
    name: "Alarm L2 - SOC Too Low"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0080) != 0;

  - platform: template
    name: "Alarm L1 - Voltage Diff Too High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0100) != 0;

  - platform: template
    name: "Alarm L2 - Voltage Diff Too High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0200) != 0;

  - platform: template
    name: "Alarm L1 - Temp Diff Too High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0400) != 0;

  - platform: template
    name: "Alarm L2 - Temp Diff Too High"
    lambda: |-
      if (isnan(id(fault_status_2).state)) return false;
      if ((uint16_t)id(fault_status_2).state == 0xFFFF) return false;
      return ((uint16_t)id(fault_status_2).state & 0x0800) != 0;

  - platform: template
    name: "Charging MOS Overtemp Warning"
    lambda: |-
      if (isnan(id(fault_status_3).state)) return false;
      if (static_cast<uint16_t>(id(fault_status_3).state) == 0xFFFF) return false;
      return (static_cast<uint16_t>(id(fault_status_3).state) & 0x0001) != 0;
